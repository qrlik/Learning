"""
Предположим есть данные о разных автомобилях и спецтехнике. Данные представлены в виде таблицы с характеристиками.
Обратите внимание на то, что некоторые колонки присущи только легковым автомобилям, например, кол-во пассажирских мест.
В свою очередь только у грузовых автомобилей есть длина, ширина и высота кузова.
Вам необходимо создать свою иерархию классов для данных, которые описаны в таблице.
BaseCar
Car(BaseCar)
Truck(BaseCar)
SpecMachine(BaseCar)

У любого объекта есть обязательный атрибут car_type. Он означает тип объекта и может принимать одно из значений: car, truck, spec_machine.
Также у любого объекта из иерархии есть фото в виде имени файла — обязательный атрибут photo_file_name.
В базовом классе нужно реализовать метод get_photo_file_ext для получения расширения файла (“.png”, “.jpeg” и т.д.) с фото.
Расширение файла можно получить при помощи os.path.splitext.
Для грузового автомобиля необходимо разделить характеристики кузова на отдельные составляющие body_length, body_width, body_height. Разделитель — латинская буква x.
Характеристики кузова могут быть заданы в виде пустой строки, в таком случае все составляющие равны 0.
Обратите внимание на то, что характеристики кузова должны быть вещественными числами.
Также для класса грузового автомобиля необходимо реализовать метод get_body_volume, возвращающий объем кузова в метрах кубических.

Далее необходимо реализовать функцию, на вход которой подается имя файла в формате csv. Файл содержит данные аналогичные строкам из таблицы.
Вам необходимо прочитать этот файл построчно при помощи модуля стандартной библиотеки csv.
Затем проанализировать строки и создать список нужных объектов с автомобилями и специальной техникой. Функция должна возвращать список объектов.

И методы:
get_photo_file_ext и get_body_volume
У каждого объекта из иерархии должен быть свой набор атрибутов и методов.
У класса легковой автомобиль не должно быть метода get_body_volume в отличие от класса грузового автомобиля.
Функция, которая парсит строки входного массива, должна называться get_car_list.
Для проверки работы своей реализации функции get_car_list и всех созданных классов вам необходимо использовать следующий csv-файл:
"""
import os.path
import csv


class BaseCar:
    """Базовый класс автомобиля"""
    def __init__(self, photo_file_name, brand, carrying):
        self.photo_file_name = photo_file_name
        self.brand = brand
        self.carrying = float(carrying)

    def get_photo_file_ext(self):
        """Получение расщирения файла"""
        _, ext = os.path.splitext(self.photo_file_name)
        return ext


class Car(BaseCar):
    """Легковой автомобиль"""
    car_type = "car"

    def __init__(self, photo_file_name, brand, carrying, passenger_seats_count):
        super().__init__(photo_file_name, brand, carrying)
        self.passenger_seats_count = int(passenger_seats_count)


class Truck(BaseCar):
    """Грузовой автомобиль"""
    car_type = "truck"

    def __init__(self, photo_file_name, brand, carrying, body_whl):
        super().__init__(photo_file_name, brand, carrying)
        try:  # получаем значения кузова
            length, width, height = (float(c) for c in body_whl.split("x", 2))
        except ValueError:
            length, width, height = .0, .0, .0

        self.body_length = length
        self.body_width = width
        self.body_height = height

    def get_body_volume(self):
        """Рассчет объема кузова"""
        return self.body_height * self.body_length * self.body_width


class SpecMachine(BaseCar):
    """Специализированная техника"""
    car_type = "spec_machine"

    def __init__(self, photo_file_name, brand, carrying, extra):
        super().__init__(photo_file_name, brand, carrying)
        self.extra = extra


def get_car_list(csv_filename):
    """Получение списка техники из csv файла"""
    car_list = []
    with open(csv_filename) as csv_fd:
        reader = csv.reader(csv_fd, delimiter=';')
        next(reader)  # пропускаем заголовок столбцов
        for row in reader:
            try:
                if not (row[3] or row[1] or row[5]):  # если отсутствуют обязательные аттрибуты
                    raise ValueError
                if row[0] == Car.car_type:
                    car_list.append(Car(row[3], row[1], row[5], row[2]))
                elif row[0] == Truck.car_type:
                    car_list.append(Truck(row[3], row[1], row[5], row[4]))
                elif row[0] == SpecMachine.car_type:
                    if not row[6]:
                        raise ValueError
                    car_list.append(SpecMachine(row[3], row[1], row[5], row[6]))
            except (ValueError, IndexError) as err:
                print("Error creating list of car", err)
                continue
    return car_list


if __name__ == "__main__":
    car_list = get_car_list("D:/coursera_cars.csv")
    print(car_list)
