// Темы:
// Простое наследование. Виртуальные функции. Абстрактные классы.
// Битовые поля.

#include <tchar.h>
#include <cstdio>
#include "shape.h"
#include "bytes.h"
#define	  stop __asm nop

int _tmain(int argc, _TCHAR* argv[])
{
	//Задание 1.Простое наследование.Аргументы конструктора,
	// передаваемые в базовый класс.

	//Создайте иерархию классов:
	//базовый класс Shape (который описывает любую фигуру)
	//и два производных класса Rect и Circle.
	//Подумайте: какие данные и методы нужно ввести в базовый
	//и производные классы (например, любую фигуру можно сделать
	//цветной => в базовом классе можно ввести переменную, которая
	//будет определять цвет фигуры.
	//Подсказка: для хранения цвета объявите перечисление (RED,GREEN,BLUE...);

	//В конструкторах производных классов предусмотрите передачу
	//параметра-цвета конструктору базового класса.
	//При создании и уничтожении объекта производного типа определите
	//последовательность вызовов конструкторов и деструкторов базового
	//и производного классов

	//Задание 2.Виртуальные функции.
	//2а) Модифицируйте классы Shape,Rect и Circle:
	//добавьте в каждый класс public метод void WhereAmI().
	//Реализация каждой функции должна выводить сообщение
	//следующего вида "Now I am in class Shape(Rect или Circle)".
	//Выполните приведенный фрагмент, объясните результат.

	//2б) Сделайте метод WhereAmI() виртуальным.
	//Снова выполните приведенный фрагмент, объясните разницу.

	{
//	Shape s;
	Rect r;
	Circle c;

	//Метод какого класса вызывается в следующих строчках???
//	s.WhereAmI();	//	shape
	r.WhereAmI();	//	rect
	c.WhereAmI();	//	circle

//	Shape* pShape = &s;
	Shape* pRect = &r;
	Shape* pCircle = &c;
//	pShape->WhereAmI();	//	shape
	pRect->WhereAmI();	//	rect (v)
	pCircle->WhereAmI(); //	circle (v)

	//Заполните ... согласно комментариям
//	Shape& rShape = s; //псевдоним s
	Shape& rRect = r; //псевдоним r
	Shape& rCircle = c; //псевдоним c
//	rShape.WhereAmI();	//вызов посредством rShape
	rRect.WhereAmI();	//вызов посредством	rRect	(v)
	rCircle.WhereAmI(); //вызов посредством rCircle	(v)
	}
	stop
	printf("\n");

	//Задание 3.Виртуальные деструкторы.
	//Модифицируйте классы:
	//a) введите соответствующие
	// деструкторы (без ключевого слова virtual).
	//Реализация каждого деструктора
	//должна выводить сообщение следующего вида
	// "Now I am in Shape's destructor!" или
	// "Now I am in Rect's destructor!"
	//Выполните фрагмент. Объясните результат.

	// b) Добавьте в объявление деструкторов ключевое слово virtual
	//Выполните фрагмент.Объясните разницу.

	//Подумайте: какие конструкторы вызываются в следующей строке?
	//Если в разработанных классов каких-то конструкторов
	//не хватает - реализуйте
	//Если Вы считаете, что в приведенном фрагменте чего-то
	//не хватает - добавьте
	{
		Rect r;
		Shape* ar[] = { new Rect(), new Rect(r), new Circle(r), new Circle() }; // массив указателей на объекты
		//Вызовите для каждого элемента массива метод WhereAmI()
		for (size_t i = 0; i < 4; i++)
		{
			ar[i]->WhereAmI(); // через указатель и ссылку виртуальные методы работают корректно
			delete ar[i]; // вызывается деструктор целевого объекта
		}
	}
	stop
	printf("\n");

	//Задание 4*. В чем заключается отличие 1) и 2)
	{
		Shape* pShapes = new Rect[10];//1)
		Rect* pRects = new Rect[10];//2)

		//Попробуйте вызвать метод WhereAmI() для каждого элемента обоих массивов -
		//в чем заключается проблема???
		for (size_t i = 0; i < 10; i++)
		{
			//pShapes[i].WhereAmI(); // возникнет ошибка, т.к виртуальный метод вызывается посредством объекта с помощью указателя Shape*
			// т.е компилятор пытается вызвать WhereAmI() для Rect, но доступа туда через данный указатель нет (полиморфизм не сработает)
			//pShapes[i].Shape::WhereAmI(); // вызовется Shape::WhereAmI()
			static_cast<Rect*>(pShapes)[i].WhereAmI();
			// преобразуем Shape* в Rect* чтобы вызвать Rect::WhereAmI()
		}
		for (size_t i = 0; i < 10; i++)
		{
			pRects[i].WhereAmI();
		}
		//Освободите динамически захваченную память
		delete[] pShapes;
		delete[] pRects;
	}
	stop
	printf("\n");

	//Задание 5.Виртуальные функции и оператор разрешения области видимости.
	{
		Rect r;
		Shape* p = &r;
		p->WhereAmI(); // срабатывает полиморфизм, т.к вызываем через указатель

		//5a Оператор разрешения области видимости.
		//Посредством объекта r и указателя p вызовите виртуальную функцию
		//WhereAmI()класса Shape
		p->Shape::WhereAmI();
	}
	stop
	printf("\n");

	//Задание 6.Чисто виртуальные функции.
	//Введите в базовый класс метод void Inflate(int); Подумайте:
	//можно ли реализовать такой метод для базового класса? => как его нужно объявить.
	//Реализуйте этот метод для производных классов.
	{
		Rect r;
		Shape* p = &r;
		p->Inflate(5); // ОК для класса Rect
		Circle c;
		p = &c;
		p->Inflate(5); // ОК для класса Circle
		stop
	}
	stop
	printf("\n");

	/**/
	//Задание 7.Объединения (union) C++. Битовые поля.
	//1.
	//Создайте следующие классы для различных представлений значений байта:
	//Bin - для двоичного представления
	//Hex - для шестнадцатерчного представления
	//Oct - для восьмеричного представления.
	//Подсказка 1: - для удобства используйте битовые поля.
	//Подсказка 2: - конструкторов в таких вспомогательных классах быть не должно,
	//так как все они будут членами объединения (union).
	//2.
	//В каждом классе введите метод Show, который должен выводить значение в
	//соответствующем виде
	//3.
	//Посредством объединения MyByte предоставьте пользователю возможность манипулировать
	//одним и тем же значением по-разному:
	//а) выводить: десятичное, шестнадцатеричное, восьмеричное, двоичное значение байта
	//          а также символ, соответствующий хранимому значению (если есть соответствие);
	//б) выводить отдельные (указанные посредством параметра) шестнадцатеричные,
	//			восьмеричные, двоичные цифры;
	//в) изменять отдельные двоичные, восьмеричные или шестнадцатеричные цифры;

	Bytes byte(0x2f); // /
	byte.ShowHex();
	byte.ShowBin();
	byte.ShowOct();
	byte.ShowDec();
	byte.ShowChar();
	
	return 0;
}//endmain

