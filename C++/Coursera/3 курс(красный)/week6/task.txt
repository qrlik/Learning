Конструктор класса SearchServer принимает поток ввода, содержащий базу документов. При этом:
  -один документ — это одна строка входного потока;
  -документы состоят из слов, разделённых одним или несколькими пробелами;
  -слова состоят из строчных латинских букв.

Метод AddQueriesStream(istream& query_input, ostream& search_results_output)
  Метод AddQueriesStream выполняет собственно поиск. Он принимает входной поток поисковых запросов и выходной поток для
  записи результатов поиска. При этом:
    -один запрос — это одна строка в потоке query_input
    -каждый поисковый запрос состоит из слов, разделённых одним или несколькими пробелами
    -так же, как и в документах, слова в запросах состоят из строчных латинских букв

  Результатом обработки поискового запроса является набор из максимум пяти наиболее релевантных документов.
  В реальных поисковых системах метрика релевантности устроена довольно сложно.
  Для каждого поискового запроса метод AddQueriesStream должен вывести в поток search_results_output одну строку в формате
  [текст запроса]: {docid: <значение>, hitcount: <значение>} {docid: <значение>, hitcount: <значение>} ...,
  где docid — идентификатор документа (см. ниже), а hitcount — значение метрики релевантности для данного документа
  (то есть суммарное количество вхождений всех слов запроса в данный документ).

  Два важных замечания:
  -добавлять в результаты поиска документы, hitcount которых равен нулю, не нужно.
  -при подсчёте hitcount нужно учитывать только слова целиком, то есть слово «there» не является вхождением слова «the»

Метод UpdateDocumentBase(istream& document_input)
  Метод UpdateDocumentBase заменяет текущую базу документов на новую, которая содержится в потоке document_input.
  При этом документ из первой строки этого потока будет иметь идентификатор (docid) 0, документ из второй строки — идентификатор 1 и т.д.
  
Первая часть задачи
  Эта задача состоит из двух частей.
  В первой части вам дана корректная реализация класса SearchServer, которая работает недостаточно быстро.
  Вам нужно найти и устранить узкие места в её реализации.
  В тестирующую систему нужно сдать cpp-файл или архив из нескольких исходных файлов, содержащий вашу ускоренную реализацию.
  Ваша реализация будет тестироваться вот такой функцией (объект класса SearchServer будет создан один раз,
  и у него один раз будет вызван метод AddQueriesStream)
  
Вторая часть задачи
  В этой части мы смоделируем работу web-сервера, который одновременно обрабатывает несколько потоков поисковых запросов,
  а также обновления базы документов.
  На практике такой web-сервер бо̀льшую часть времени обрабатывает поисковые запросы.
  База документов обновляется не очень часто с определённой периодичностью, например, один раз в сутки.
  Обновление базы может занимать значительное время, поэтому сервер не должен прекращать обработку запросов, пока оно выполняется.
  Ваше решение второй части задачи должно это учитывать.

  Метод AddQueriesStream должен быть готов к тому, что параллельно с ним будет выполняться метод UpdateDocumentBase и наоборот.
  Метод AddQueriesStream не обязан обрабатывать все запросы с той версией базы документов, которая была актуальна во время его запуска.
  То есть, если во время работы метода AddQueriesStream база документов была обновлена,
  он может использовать новую версию базы для обработки оставшихся запросов.
