Многие программы создаются для пакетной обработки большого числа однородных записей.
Часто при этом обработка этих записей может быть разделена на логически самостоятельные этапы, это упрощает
совместную разработку новых фич и позволяет легко комбинировать эти этапы в новые конфигурации.
Такую обработку можно мысленно вообразить себе как поток объектов, идущих по конвейеру от одного обработчика к другому.
В этой задаче вам предстоит закончить реализацию такого конвейера.

Возможен вариант архитектуры с shared_ptr, но обычно достаточно unique_ptr, и он в этой ситуации обладает преимуществами:

уменьшает накладные расходы
однозначно передает владение: предполагается, что отдав объект, обработчик уже не будет его модифицировать,
что упрощает рассуждения о корректности программы

В этой задаче вам предлагается разработать конвейер обработчиков электронных писем.
Обработчики должны реализовывать абстрактный класс Worker
Также реализуйте обработчики Reader, Filter, Copier и Sender, наследующие от класса Worker,
а также класс PipelineBuilder, конструирующий цепочку обработчиков

Требования:

Worker
метод SetNext должен принимать во владение следующий обработчик из цепочки
метод PassOn должен вызывать метод Process следующего обработчика, если он был установлен

Reader
конструктор должен принимать входной поток (istream&), из которого нужно читать сообщения
метод Run должен читать из входного потока все e-mail'ы и передавать дальше каждый из них.
Один e-mail представляется во входном потоке полями from, to, body, каждое из которых находится на своей строке.

Filter
конструктор должен принимать предикат типа function<bool(const Email&)>
метод Process должен передавать дальше только сообщения, удовлетворяющие предикату

Copier
конструктор должен принимать строку-адрес получателя
метод Process должен передавать сообщение как исходному получателю, так и указанному в конструкторе.
В случае, если они совпадают, дублировать сообщение не нужно

Sender
конструктор должен принимать поток для записи сообщений
метод Process должен записывать сообщения в поток в том же формате, в котором они были прочитаны
Все обработчики должны передавать сообщения дальше, если обратное не требуется явно.

PipelineBuilder
Конструктор должен инициализировать цепочку обработчиков обработчиком Reader с переданным потоком.
Методы с типом возврата PipelineBuilder& должны возвращать ссылку на экземпляр класса, для которого они были вызваны,
а также добавлять в конец цепочки новый обработчик, соответствующий вызванному методу
(Filter для метода FilterBy, Sender для метода Send и т.д.).
Метод Build должен возвращать готовую цепочку обработчиков; подразумевается, что после его завершения экземпляр PipelineBuilder больше использоваться не будет
