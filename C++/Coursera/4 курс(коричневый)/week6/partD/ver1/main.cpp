
#include "test_runner.h"
#include "request.h"

using namespace std;

void TestPartC() {
    istringstream input("13\n"
        "Stop Tolstopaltsevo: 55.611087, 37.20829, 3900m to Marushkino\n"
        "Stop Marushkino: 55.595884, 37.209755, 9900m to Rasskazovka\n"
        "Bus 256: Biryulyovo Zapadnoye > Biryusinka > Universam > Biryulyovo Tovarnaya > Biryulyovo Passazhirskaya > Biryulyovo Zapadnoye\n"
        "Bus 750: Tolstopaltsevo - Marushkino - Rasskazovka\n"
        "Stop Rasskazovka: 55.632761, 37.333324\n"
        "Stop Biryulyovo Zapadnoye: 55.574371, 37.6517, 7500m to Rossoshanskaya ulitsa, 1800m to Biryusinka, 2400m to Universam\n"
        "Stop Biryusinka: 55.581065, 37.64839, 750m to Universam\n"
        "Stop Universam: 55.587655, 37.645687, 5600m to Rossoshanskaya ulitsa, 900m to Biryulyovo Tovarnaya\n"
        "Stop Biryulyovo Tovarnaya: 55.592028, 37.653656, 1300m to Biryulyovo Passazhirskaya\n"
        "Stop Biryulyovo Passazhirskaya: 55.580999, 37.659164, 1200m to Biryulyovo Zapadnoye\n"
        "Bus 828: Biryulyovo Zapadnoye > Universam > Rossoshanskaya ulitsa > Biryulyovo Zapadnoye\n"
        "Stop Rossoshanskaya ulitsa: 55.595579, 37.605757\n"
        "Stop Prazhskaya: 55.611678, 37.603831\n"
        "6\n"
        "Bus 256\n"
        "Bus 750\n"
        "Bus 751\n"
        "Stop Samara\n"
        "Stop Prazhskaya\n"
        "Stop Biryulyovo Zapadnoye\n"
    );

    using namespace Request::Handler;
    const auto requests = Read(input);
    const auto responses = Process(requests);
    ostringstream output;
    Print(responses, output);
    ASSERT_EQUAL(output.str(),
        "Bus 256: 6 stops on route, 5 unique stops, 5950.000000 route length, 1.361239 curvature\n"
        "Bus 750: 5 stops on route, 3 unique stops, 27600.000000 route length, 1.318084 curvature\n"
        "Bus 751: not found\n"
        "Stop Samara: not found\n"
        "Stop Prazhskaya: no buses\n"
        "Stop Biryulyovo Zapadnoye: buses 256 828"
    );
}

void TestPartD() {
    istringstream input(R"({)" "\n"
        R"( "base_requests": [)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Marushkino": 3900)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.20829,)" "\n"
        R"(     "name": "Tolstopaltsevo",)" "\n"
        R"(     "latitude": 55.611087)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Rasskazovka": 9900)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.209755,)" "\n"
        R"(     "name": "Marushkino",)" "\n"
        R"(     "latitude": 55.595884)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "256",)" "\n"
        R"(     "stops": [)" "\n"
        R"(       "Biryulyovo Zapadnoye",)" "\n"
        R"(       "Biryusinka",)" "\n"
        R"(       "Universam",)" "\n"
        R"(       "Biryulyovo Tovarnaya",)" "\n"
        R"(       "Biryulyovo Passazhirskaya",)" "\n"
        R"(       "Biryulyovo Zapadnoye")" "\n"
        R"(     ] ,)" "\n"
        R"(     "is_roundtrip": true)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "750",)" "\n"
        R"(     "stops": [)" "\n"
        R"(       "Tolstopaltsevo",)" "\n"
        R"(       "Marushkino",)" "\n"
        R"(       "Rasskazovka")" "\n"
        R"(     ] ,)" "\n"
        R"(     "is_roundtrip": false)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {},)" "\n"
        R"(     "longitude": 37.333324,)" "\n"
        R"(     "name": "Rasskazovka",)" "\n"
        R"(     "latitude": 55.632761)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Rossoshanskaya ulitsa": 7500,)" "\n"
        R"(       "Biryusinka": 1800,)" "\n"
        R"(       "Universam": 2400)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.6517,)" "\n"
        R"(     "name": "Biryulyovo Zapadnoye",)" "\n"
        R"(     "latitude": 55.574371)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Universam": 750)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.64839,)" "\n"
        R"(     "name": "Biryusinka",)" "\n"
        R"(     "latitude": 55.581065)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Rossoshanskaya ulitsa": 5600,)" "\n"
        R"(       "Biryulyovo Tovarnaya": 900)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.645687,)" "\n"
        R"(     "name": "Universam",)" "\n"
        R"(     "latitude": 55.587655)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Biryulyovo Passazhirskaya": 1300)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.653656,)" "\n"
        R"(     "name": "Biryulyovo Tovarnaya",)" "\n"
        R"(     "latitude": 55.592028)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {)" "\n"
        R"(       "Biryulyovo Zapadnoye": 1200)" "\n"
        R"(     },)" "\n"
        R"(     "longitude": 37.659164,)" "\n"
        R"(     "name": "Biryulyovo Passazhirskaya",)" "\n"
        R"(     "latitude": 55.580999)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "828",)" "\n"
        R"(     "stops": [)" "\n"
        R"(       "Biryulyovo Zapadnoye",)" "\n"
        R"(       "Universam",)" "\n"
        R"(       "Rossoshanskaya ulitsa",)" "\n"
        R"(       "Biryulyovo Zapadnoye")" "\n"
        R"(     ] ,)" "\n"
        R"(     "is_roundtrip": true)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {},)" "\n"
        R"(     "longitude": 37.605757,)" "\n"
        R"(     "name": "Rossoshanskaya ulitsa",)" "\n"
        R"(     "latitude": 55.595579)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "road_distances": {},)" "\n"
        R"(     "longitude": 37.603831,)" "\n"
        R"(     "name": "Prazhskaya",)" "\n"
        R"(     "latitude": 55.611678)" "\n"
        R"(   })" "\n"
        R"( ],)" "\n"
        R"( "stat_requests": [)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "256",)" "\n"
        R"(     "id": 1965312327)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "750",)" "\n"
        R"(     "id": 519139350)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Bus",)" "\n"
        R"(     "name": "751",)" "\n"
        R"(     "id": 194217464)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "name": "Samara",)" "\n"
        R"(     "id": 746888088)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "name": "Prazhskaya",)" "\n"
        R"(     "id": 65100610)" "\n"
        R"(   },)" "\n"
        R"(   {)" "\n"
        R"(     "type": "Stop",)" "\n"
        R"(     "name": "Biryulyovo Zapadnoye",)" "\n"
        R"(     "id": 1042838872)" "\n"
        R"(   })" "\n"
        R"( ])" "\n"
        R"(})"
    );

    using namespace Request::Handler;
    const auto requests = Read(input);
    const auto responses = Process(requests);
    ostringstream output;
    Print(responses, output);

    string result(
        R"([)" "\n"
        R"({)" "\n"
        R"("request_id": 1965312327,)" "\n"
        R"("route_length": 5950.000000,)" "\n"
        R"("curvature": 1.361239,)" "\n"
        R"("stop_count": 6,)" "\n"
        R"("unique_stop_count": 5)" "\n"
        R"(},)" "\n"
        R"({)" "\n"
        R"("request_id": 519139350,)" "\n"
        R"("route_length": 27600.000000,)" "\n"
        R"("curvature": 1.318084,)" "\n"
        R"("stop_count": 5,)" "\n"
        R"("unique_stop_count": 3)" "\n"
        R"(},)" "\n"
        R"({)" "\n"
        R"("request_id": 194217464,)" "\n"
        R"("error_message": "not found")" "\n"
        R"(},)" "\n"
        R"({)" "\n"
        R"("request_id": 746888088,)" "\n"
        R"("error_message": "not found")" "\n"
        R"(},)" "\n"
        R"({)" "\n"
        R"("request_id": 65100610,)" "\n"
        R"("buses": [])" "\n"
        R"(},)" "\n"
        R"({)" "\n"
        R"("request_id": 1042838872,)" "\n"
        R"("buses": [)" "\n"
        R"("256",)" "\n"
        R"("828")" "\n"
        R"(])" "\n"
        R"(})" "\n"
        R"(])");

    ASSERT_EQUAL(output.str(), result);
}

void TestAll() {
    TestRunner tr;
    RUN_TEST(tr, TestPartC);
    RUN_TEST(tr, TestPartD);
}

int main() {
    TestAll();
    using namespace Request::Handler;
    const auto requests = Read();
    const auto responses = Process(requests);
    Print(responses);
    return 0;
}
