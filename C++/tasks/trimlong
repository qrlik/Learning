#include <iostream>
#include <string_view>
#include <algorithm>
using namespace std;

#include "test_runner.h"
#include "profile.h"

/*
Напишите функцию, которая обрезает пробелы в конце переданной ей строки.
Функция должна быть написана в расчёте на работу с очень длинными строками с очень большим количеством пробелов, оптимизирована по количеству обращений к памяти.
Сигнатура: void TrimRight( char *s );
*/

bool checkZeroByte(const int* ptr)
{
	const char* new_ptr = reinterpret_cast<const char*>(ptr);
	for (size_t i = 0; i < sizeof(int); ++i)
	{
		if (new_ptr[i] == 0)
		{
			return true;
		}
	}
	return false;
}

char* find_not_space(int* ptr, char* begin)
{
	char* new_ptr = reinterpret_cast<char*>(ptr);
	for (size_t i = 0; i < sizeof(int) && new_ptr != begin; ++i)
	{
		if (*(--new_ptr) != ' ')
		{
			break;
		}
	}
	return new_ptr;
}

void TrimRight(char* s) {
	if (!s) {
		return;
	}

	int mask = *reinterpret_cast<int*>(string(4, ' ').data()); // маска из пробелов

	int* ptr = reinterpret_cast<int*>(s);
	int* space = nullptr;

	bool break_point = false;
	for (; ; ++ptr) {
		if (*ptr == mask) {
			if (!space) {
				space = ptr;
			}
		}
		else {
			break_point = checkZeroByte(ptr);
			if (!break_point) {
				space = nullptr;
			}
			else {
				break;
			}
		}
	}

	int* where_we_are = (space) ? space : ptr;
	char* last_pos = find_not_space(where_we_are, s);

	s = reinterpret_cast<char*>(ptr);
	char* last_space = nullptr;
	for (; *s != '\0'; ++s)
	{
		if (*s == ' ') {
			if (!last_space) {
				last_space = s;
			}
		}
		else {
			last_space = nullptr;
		}
	}

	if (last_space && last_space == reinterpret_cast<char*>(ptr))
	{
		if (*last_pos == ' ') {
			*last_pos = 0;
		}
		else {
			last_pos[1] = 0;
		}
	}
	else if (last_space)
	{
		*last_space = 0;
	}
	else if (s == reinterpret_cast<char*>(ptr))
	{
		last_pos[1] = 0;
	}
}

void TrimRightStrlen(char* s) {
	if (!s) {
		return;
	}

	size_t len = strlen(s);
	for (; len > 0; --len) {
		if (s[len - 1] != ' ') {
			break;
		}
	}
	s[len] = '\0';
}

void TrimRightFor(char* s) {
	if (!s) {
		return;
	}

	char* last_space = nullptr;
	for (; *s != '\0'; ++s)
	{
		if (*s == ' ') {
			if (!last_space) {
				last_space = s;
			}
		}
		else {
			last_space = nullptr;
		}
	}

	if (last_space) {
		*last_space = '\0';
	}
}

void TrimRightWhile(char* s) {
	if (!s) {
		return;
	}

	char* last_space = nullptr;
	char symbol = *s;

	while (symbol != '\0') {
		if (*s == ' ') {
			if (!last_space) {
				last_space = s;
			}
		}
		else if (symbol != ' ') {
			last_space = nullptr;
		}
		++s;
		symbol = *s;
	}

	if (last_space) {
		*last_space = '\0';
	}
}

template<typename Func>
void TestTrimTemplate(Func f)
{
	string test = "a b c   ";
	string test2 = "                  a";
	string test3 = "a                  ";
	string test4 = "                  ";
	f(test.data());
	f(test2.data());
	f(test3.data());
	f(test4.data());

	string test_check = "a b c";
	string test2_check = "                  a";
	string test3_check = "a";
	string test4_check = "";
	ASSERT_EQUAL(test.data(), test_check);
	ASSERT_EQUAL(test2.data(), test2_check);
	ASSERT_EQUAL(test3.data(), test3_check);
	ASSERT_EQUAL(test4.data(), test4_check);
}

void TestTrimRight()
{
	TestTrimTemplate(TrimRight);
}

void TestTrimRightStrlen()
{
	TestTrimTemplate(TrimRightStrlen);
}

void TestTrimRightFor()
{
	TestTrimTemplate(TrimRightFor);
}

void TestTrimRightWhile()
{
	TestTrimTemplate(TrimRightWhile);
}

void TestAll()
{
	TestRunner tr;
	RUN_TEST(tr, TestTrimRight);
	RUN_TEST(tr, TestTrimRightStrlen);
	RUN_TEST(tr, TestTrimRightFor);
	RUN_TEST(tr, TestTrimRightWhile);
}

int main()
{
	TestAll();

	{
		LOG_DURATION("String_view");
		string test(1'000'000'000, ' ');
		TrimRight(test.data());
		cout << "SV result is '" << test.data() << "'" << endl;
	}

	{
		LOG_DURATION("Strlen");
		string test(1'000'000'000, ' ');
		TrimRightStrlen(test.data());
		cout << "Strlen result is '" << test.data() << "'" << endl;
	}

	{
		LOG_DURATION("For");
		string test(1'000'000'000, ' ');
		TrimRightFor(test.data());
		cout << "For result is '" << test.data() << "'" << endl;
	}

	{
		LOG_DURATION("While");
		string test(1'000'000'000, ' ');
		TrimRightWhile(test.data());
		cout << "While result is '" << test.data() << "'" << endl;
	}
	return 0;
}
