#include <iostream>
#include <string>
#include <vector>
#include <sstream>
#include <iterator>
#include <chrono>
#include <ctime>

using namespace std;
using namespace std::chrono;

template <typename T> void insertion_sort(vector<T>& v)		// O(n^2)
{
	for (int i = 1; i < static_cast<int>(v.size()); ++i)	// n = size - 1;
	{
		T key = v[i];										// n - 1
		int j = i - 1;										// n - 1
		while (j > -1 && v[j] > key)						// E(t) (ot i=1 do n) t - количество проверок while
		{
			v[j + 1] = v[j];								// E(t-1) (ot i=1 do n)
			--j;											// E(t-1) (ot i=1 do n)
		}
		v[j + 1] = key;										// n - 1
	}
}

template <typename T> void selection_sort(vector<T>& v)				// O(n^2)
{
	for (size_t i = 0; i + 1 < v.size(); ++i)						// n = size - 1
	{
		size_t min = i;												// n - 1
		for (size_t j = i + 1; j <v.size(); ++j)					// E(n - i + 1) (ot i = 0 do n)
		{
			if (v[j] < v[min])										// E(n - i) (ot i = 0 do n)
			{
				min = j;											// E(n - i) (ot i = 0 do n)
			}
		}
		if (min != i)												// n - 1	
		{
			swap(v[i], v[min]);										// n - 1
		}												
	}
}

template <typename It> void merge(It begin, It mid, It end)
{ // inplace_merge, вариант с небольшими затратами памяти
	vector<typename It::value_type> tmp1(begin, mid);
	vector<typename It::value_type> tmp2(mid, end);
	auto it2 = tmp2.begin();
	for (auto it1 = tmp1.begin(); it1 != tmp1.end(); ++begin)
	{
		if (it2 == tmp2.end()) {
			copy(it1, tmp1.end(), begin);
			break;
		}
		if (*it2 < *it1) {
			*begin = *it2;
			++it2;
		}
		else {
			*begin = *it1;
			++it1;
		}
	}
	copy(it2, tmp2.end(), begin);
}

template <typename It> void merge_sort(It begin, It end) 	// O(nlgn)
{
	if (distance(begin, end) > 1)
	{
		size_t q = distance(begin, end) / 2;
		merge_sort(begin, begin + q);
		merge_sort(begin + q, end);
		merge(begin, begin + q, end);			// O(n)
	}
}

int main() {	
	vector<unsigned int> ar;
	const size_t N = 50000;
	ar.reserve(N);
	srand(unsigned(time(0)));
	for (size_t i = 0; i < N; ++i)
	{
		ar.emplace_back(rand());
	}
	vector<unsigned int> ar2(ar.begin(), ar.end());
	vector<unsigned int> ar3(ar.begin(), ar.end());

	auto start = steady_clock::now();
	insertion_sort(ar);
	auto finish = steady_clock::now();
	cout << duration_cast<milliseconds>(finish - start).count() << endl;	// 24 (below 1500) faster	1113 (10000)	27558 (50000)

	auto start2 = steady_clock::now();
	selection_sort(ar2);
	auto finish2 = steady_clock::now();
	cout << duration_cast<milliseconds>(finish2 - start2).count() << endl;	// 48						2153			53818

	auto start3 = steady_clock::now();
	merge_sort(ar3.begin(), ar3.end());
	auto finish3 = steady_clock::now();
	cout << duration_cast<milliseconds>(finish3 - start3).count() << endl;	// 24						180				990

	//for (auto i : ar3)
	//{
	//	cout << i << ' ';
	//}
	return 0;
}
